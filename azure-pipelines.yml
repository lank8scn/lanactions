# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# https://dev.azure.com/liangyuanpeng/lanactions
trigger:
  branches:
    include:
      - main
      - pulsar

pr:
  - "*"

schedules:
  - cron: "0 0,1,4,6,8,22 * * *" # 每天半夜构建
    displayName: Daily midnight build
    always: true #默认是上次成功运行后或有新的提交
    branches:
      include:
      - main
      - pulsar

pool:
  vmImage: ubuntu-latest




stages:
- stage: Build 
  jobs:
  - job: BuildKindNode
    strategy:
      matrix:
        master:
          ref: 'master'
        release-1.30:
          ref: 'release-1.30'
        release-1.29:
          ref: 'release-1.29'
        release-1.28:
          ref: 'release-1.28'
    steps:
    - script: |
        docker images
        go version
        free -mh
        df -h 
        rm -rf /opt/hostedtoolcache/CodeQL
        rm -rf /opt/hostedtoolcache/node
        rm -rf /opt/hostedtoolcache/Python
        docker rmi `docker images -aq`
        df -h
        pwd 
        ls
        uname -a
      displayName: "check env"

    - script: |
        export GOFLAGS="-p=2"
        git clone https://github.com/kubernetes/kubernetes
        cd kubernetes 
        git checkout $(ref)
        cd ..
        export KUBEROOT=$PWD/kubernetes
        git clone https://github.com/kubernetes-sigs/kind
        cd kind
        hack/release/build/push-node.sh 
        docker images
        df -h
      displayName: "build kind node"
  - job: BuildKubernetes
    strategy:
        matrix:
          master:
            ref: 'master'
          release-1.30:
            ref: 'release-1.30'
          release-1.29:
            ref: 'release-1.29'
          release-1.28:
            ref: 'release-1.28'
    steps:
    - script: |
        docker images
        go version
        free -mh
        df -h 
        rm -rf /opt/hostedtoolcache/CodeQL
        rm -rf /opt/hostedtoolcache/node
        rm -rf /opt/hostedtoolcache/Python
        docker rmi `docker images -aq`
        df -h
        pwd 
        ls
        uname -a
      displayName: "check env"

    - script: |
        export GOFLAGS="-p=2"
        git clone https://github.com/kubernetes/kubernetes
        cd kubernetes 
        git checkout $(ref)
        KUBE_BUILD_CONFORMANCE=y KUBE_BUILD_PLATFORMS="linux/amd64 linux/arm64" make quick-release-images
        mkdir -p _output
        du -h _output
        df -h
      displayName: "build kubernetes"



